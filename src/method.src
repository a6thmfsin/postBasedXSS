<!DOCTYPE html>
<html>
<head>
<style>
	/* Style the button that is used to open and close the collapsible content */
	.collapsible {
	  background-color: #eee;
	  color: #444;
	  cursor: pointer;
	  padding: 18px;
	  width: 100%;
	  border: none;
	  text-align: left;
	  outline: none;
	  font-size: 15px;
	}

	/* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
	.active, .collapsible:hover {
	  background-color: #ccc;
	}

	/* Style the collapsible content. Note: hidden by default */
	.content {
	  padding: 0 18px;
	  display: none;
	  overflow: hidden;
	  background-color: #f1f1f1;
	}

	img {
  		border: 3px solid #555;
	}

</style>
</head>
<body>
	<Title>XSS Lab - Method</Title>
	<h1>POST Based XSS Lab - Method Tamper</h1>
	<p>Lab to demonstrate using Method tampering to exploit reflected post based XSS.</p>

	<p><a href="/">Home</a></p>

	<button type="button" class="collapsible">Open Tutorial</button>
	<div class="content">
		<p>When you fill out the form and submit it, the form is submitted using a POST request.<br>
		The inputs are reflected in the response, so you can submit a name such as <br>
		<b>Joe&lt;script&gt;alert(1)&lt;/script&gt;</b><br>
		and the page will pop open an alert box, indicating an XSS vulnerability.<br><br>
		The issue with POST based reflected XSS vulnerabilities is that they're hard to exploit.<br>
		I would need to convince a user to type the payload into the form and submit it to get my payload running.<br><br>
		That is not a very practical exploit path. <br><br>
		While the developer has coded the form below to POST the data to the server, <br>
		<b>sometimes</b> the actual endpoint in the server is more agnostic to the method used.<br><br>
		If you proxy your interaction with this lab demo site through burp, you can see<br>
		the POST request in your Burp history like below:<br>
		<image src="./static/postForm1.png"><br>
		If you send this specific POST request to your Burp repeater, you can modify the <br>
		request before sending it. One of the first things to try with a POST based reflected XSS<br>
		vulnerability is to see if you can convert it to a GET request. If the backend accepts the <br>
		request as a GET and still pops the XSS payload, you can treat this as a normal XSS<br>
		vulnerability you can craft a malicious URL to trigger the XSS vulnerability.<br><br>
		Burp provides an option in the context menu to convert between POST and GET requests<br>
		<image src="./static/changeRequestMethod1.png"><br>
		Once the request is changed to a GET, you can resend the request in repeater<br>
		and you see that the response is precisely the same. <br>
		<image src="./static/getRequest1.png"><br><br>
		This means you can provide a malicious link to users, and if they click the link<br>
		the payload will run in their browser. Much easier path to exploitation than a POST based<br>
		XSS vulnerability. Note that not all endpoints will accept POST or GET requests, but this is an<br>
		easy first thing to try. An example URL would be:<br>
		<b>http://labServerHost/postForm?fname=Joe&lt;script&gt;alert(1)&lt;/script&gt;&lname=Smith</b>
	</p>

	</div>


	<h2>XSS Form:</h2>
	<form action="/postForm" method="post">
	  <label for="fname">First name:</label>
	  <input type="text" id="fname" name="fname"><br><br>
	  <label for="lname">Last name:</label>
	  <input type="text" id="lname" name="lname"><br><br>
	  <input type="submit" value="Submit">
	</form>

	<script>
	var coll = document.getElementsByClassName("collapsible");
	var i;

	for (i = 0; i < coll.length; i++) {
	  coll[i].addEventListener("click", function() {
	    this.classList.toggle("active");
	    var content = this.nextElementSibling;
	    if (content.style.display === "block") {
	      content.style.display = "none";
	    } else {
	      content.style.display = "block";
	    }
	  });
	}
	</script>

</body>
</html>